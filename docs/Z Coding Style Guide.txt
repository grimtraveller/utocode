0. project directory structure
svn-+-trunk
    +-branches
    +-tags
trunk-+-src-----+-makefile
      |         |
      |         +-*.h
      |         |
      |         +-*.c
      |         |
      |         +-*.cpp
      |
      +-prj-----+-vs2008-----+-*.sln
      |         +-autotools--+-configure
      |         |            +-make.in
      |         +-module-----+-*.prj
      |
      |-docs   
1.File 
 1.1 suffix
  *.h C/C++ header file
  *.c C source file
  *.cpp c++ source file
 1.2 name 
  use noun
  the name of C++ header file is class name without pre-suffix
  the name of C header file is a noun that can be simple clear to know the file function 
 1.3 file comment
  use doxygen regular and see more in sample section
 1.4 macro
  Mix C and C++ macro "__cplusplus"
  Prevent repeat include "#ifdef/#define/#endif" macro name is all upcase , replace '.' to '_' and the same as full file name like as XXX_H
 1.5 sample

 XXXX.h [C++ header file]
#ifdef __cplusplus
#ifndef XXXX_H
#define XXXX_H
 /**
 @file		XXXX.h
 @brief		declaration XXXX class, do someting
 @details	usage
 @author	zuohaitao
 @date		yyyy-mm-dd
 @warning	
 @bug		
 */
class CXXXX
{
public:
	/**	
	@name		
	@brief	
	@param	 [I/O] 
	@return	
	*/
	function();

protected:
	//
	variant

private:
};
#endif //XXXX_H
#endif //__cplusplus


 XXXX.h [C header file]
 /**
 @file		
 @brief		declaration struct enume and some functions
 @details	usage
 @author	zuohaitao
 @date		yyyy-mm-dd
 @warning	
 @bug		
 */
#ifndef XXXX_H
#define XXXX_H
#ifdef __cplusplus
extern "C" {
#endif //__cplusplus
//! 
typedef struct xxx
{
	//!
	variant

}XXX_ST,*PXXX_ST;
//!
typedef enum xx
{
	//!
	variant
}XX_E,*PXX_E;
/**
 @name		
 @brief	
 @param	 [I/O] 
 @return	
 */
extern void* function(int a, char b, float* c);
#ifdef __cplusplus
}
#endif //__cplusplus
#endif XXXX_H //XXXX_H

 XXX.cpp [c++ source file]
/*
 @file		
 @brief		implement XXX class methods
 @details	modification(why,when, where, how, who)
 @author	zuohaitao
 @date		yyyy-mm-dd
 @warning	
 @bug		
*/
///////////////////////////////////////////////////////////
/*
 *brief constructor
 */
XXX::XXX()
{
}

///////////////////////////////////////////////////////////
/*
 *brief destructor
 */
XXX::~XXX()
{
}

///////////////////////////////////////////////////////////
/*
 *brief do something
 */
XXX::function()
{
}

///////////////////////////////////////////////////////////


 XXXX.c [C source file]
/*
 @file		
 @brief		implement some functions
 @details	modification(why,when, where, how, who)
 @author	zuohaitao
 @date		yyyy-mm-dd
 @warning	
 @bug		
*/

/*
 *brief do something
 */
functions()
{
}

2 type class/struct/enum
3 variant
4 function
